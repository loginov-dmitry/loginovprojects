Дата официального релиза: 13.11.2006.

-= 14.11.2006 =-

 * Функция ArrayByName() теперь стала свойством. Единственное отличие в том, что теперь вместо круглых скобок придется указывать квадратные скобки. Свойство необходимо для того, чтобы можно было его сделать default в классе TWorkspace.
 * Для класса TRecordMatrix default стало свойство Fields
 * Для класса TCellMatrix default стало свойство Cells
 * У числовых массивов default-свойств не стал делать. В данном случае читабельность ухудшится.

-= 05.12.2006 =-

 * Исправлена встроенная процедура матричного умножения MulMatrices. Как я ее до этого тестировал - ХЗ. Но наивно думал, что она работает правильно.

-= 08.12.2006 =-
 
 * В ядро добавлены дополнительные функции для работы с комплексными числами.

-= 12.12.2006 =-

 * Добавлена функция AsVariantArray() для сохранения числового массива в вариантный массив с указанием типа элементов.
 * Добавлена функция LoadFromVariantArray(), загружающая массив Matrix из вариантного массива.
 * Добавлено несколько функций для чтения информации о записях.
 * Добавлены функции ThisCell и ThisRecord.

-= 16.12.2006 =-

 * Добавлен модуль взаимодействия с Матлабом matrixMatlab.pas. В нем реализован класс TMatlab, обеспечивающий удобный интерфейс с Матлабом. Функции GetMatrix и PutMatrix предназначены для обмена массивами, и могут передавать не только 2-мерные матрицы, но также и сложные структуры данные: массивы ячеек и записей. Размерность передаваемых числовых массивов ограничена 2-мя измерениями. Это ограничение накладывают функции Матлаба GetFullMatrix() и PutFullMatrix(), и обойти их пока не удалось. В любом случае, функции достаточно мощные, и успешно справляются с обменом даже таких сложных данных, как нейронные сети.
 Сейчас в классе TMatlab реализованы 13 различных функций, и их набор будет пополняться.

 * Добавлен новый тип данных TCharMatrix. Это не более, чем TByteMatrix, но используется при обмене символьных массивов с Матлабом.

 * Функция ArrayNameIsValid переименована в MatrixNameIsValid (так уже более привычно :). Это при том, что Matrix означает не матрицу, а любой объект в Matrix32.

 * Обновление выложил на сайте.

-= 25.12.2006 =-

 * Возникла идея создания массивов TMapFileMatrix. Они позволят выполнять обработку огромных массивов (теоретически, терабайтных) без необходимости использования больших объемов оперативной памяти. Остально только выяснить практическую необходимость подобных вещей. (09.12.2006 - задумка пока отошла на второй план :-)

 -= 20.01.2007 =-

 * Избавился от всех операций AS и IS. Надеюсь, это поможет избежать ошибок при использовании одних и тех же Matrix-классов и в EXE и в DLL без использования пакетов (хотя врядли).

 -= 21.01.2007 =-

 * Добавлена функция поиска наименьшего и наибольшего элемента массива GetMinMaxValues()

 -= 03.02.2007 =-

 * Переименованы ряд функций, в чьих именах фигурировано сочетание "array". Практически везде это сочетание было заменено на "matrix". 
 * Исправлены функции передачи и загрузки массивов в матлаб (модуль matrixMatlab). Ранее не учитывалось, что при следующем присвоении: A=B матлаб в виде строки возвращает результат - элементы массива. Функция Execute() обрабатывает этот результат и виснет на длительное время (в зависимости от размера массива). Чтобы этого не было, достаточно в конце команды поставить символ ";".
 * Добавил в некоторые функции обработку исключений. Добавил функции RaiseException и RaiseExceptionFmt.
 * Подправлена функция IsSameArrayTypes(). В ней появился новый опциональный параметр IgnoreNil, который требует, чтобы функция считала нулевые ссылки корректными массивами заданного типа. Используется в функции GetMinMaxMean() (которая в данный момент разрабатывается).

 -= 04.02.2007 =-

 * Добавлена функция GetMinMaxMean(), которая способна одновременно вернуть минимальные, максимальные и средние арифметические значения по любой указанной размерности. Для минимальных и максимальных значений функция может вернуть также и их индексы.
 * Функция IsSameArrayTypes() переименована в IsSameMatrixTypes() по причине противоречия в идеологии, заложенной в Matrix32.

 -= 09.02.2007 =-

 * В класс TMatrix добавлены 3 функции: AddNotifyClient(), DeleteNotifyClient(),DeletionNotify(). Улучшена работа с записями и массивами ячеек. Matrix позволяет существование такой ситуации, когда один и тот же объект зарегистрирован в качестве поля у нескольких записей (либо массивов ячеек). При удалении объекта он очищает всю регистрационную информацию, связанную с ним (у всех записей будет удалено поле, связанное с этим объектом, а у всех массивов ячеек будет удалена ячейка (либо ячейки), связанные с этим объектом).
 * Несколько изменена логика работы функции MatrixRefIsValid(). Теперь при передаче в нее NIL она возвращает FALSE сразу, не входя в секцию try..except, что благоприятно сказывается на производительности.
 * В функцию Resize() добавлена проверка на существование ДАННОГО экземпляра. Дело в том, что даже при уничтожении объекта зачастую вызов виртуальных функций приводит к их нормальной работе, т.е. у "мертвого" объекта можно даже изменить размеры массива. Теперь такие попытки пресекаются.
 * Изменен смысл операции ARec['RecName'] := nil; Если раньше это приводило к удалению поля и к уничтожению массива, то теперь массив не уничтожается, а происходит удаление поля и разрегистрация с помощью функции DeleteNotifyClient(). Теперь чтобы удалить поле, достаточно этого: ARec['RecName'].Free;
Однако такая операция: ARec['FieldName'] := NewMatrix приводит к реальному уничтожению массива, который был ранее зарегистрирован за полем 'FieldName' (этого не происходит только в случае передачи записи по ссылке).
Все сказанное касается в полной мере и массива ячеек.
 * Добавил в функцию TMatlab.PutMatrix() возможность передачи в данную функцию рабочей области.

  -= 22.02.2007 =-

  * В связи с острыми спорами насчет надежности Matrix32 на форуме delphimaster.ru модуль был заметно переработан.
  * Добавлена функция TMatrix.IsLiving, которая определяет, существует ли данный объект (позволяет убедиться, что Self не является "битой" ссилкой). Удалена функция MatrixRefIsValid(), т.к. она стала не нужной.
  * Добавлен метод TMatrix.FreeMatrix. Отличие его от TObject.Free в том, что он никогда не вызовет метод Destroy, если Self - "битая" ссылка. Это делает программу более надежной (вам должно быть исвестно, что если вызвать TObject.Free у несуществующего объекта, то это может привести к краху приложения).
  * Добавлена опция компиляции UseExtendedFree, которая заменяет TObject.Free на собственный TMatrix.Free (а он при своей работе обращается к TMatrix.FreeMatrix). Данную возможность многие не хотят видеть в Matrix32 по своим "идеологическим" причинам. Поэтому все-же при работе с Matrix32 рекомендуется вместо Free использовать TMatrix.FreeMatrix. Однако не стоит забывать, если вы заносите свои объекты в список TObjectList, то при уничтожении списка в любом случае будет вызываться TObject.Free, т.е. защита уничтожения объекта не сработает.
  * Добавлена опция компиляции UseLifeGuid. Тоже по идеологическим соображениям. Если опция включена, то функция TMatrix.IsLiving использует GUID (как было раньше). Если опция выключена, то функция использует глобальный список TList. Глобальный список - объект менее универсальный, чем GUID (но куда же денешься? идеология 0). Подробности по этой директиве вы найдете в модуле Matrix32.pas.
  * Удалена функция "безопасного" уничтожения объектов SafeObjectFree. Хорошо ее никто еще не видел :)) Главная ее фича была в том, что вызов метода Free был завернут в try...except (это огромнейшия грабля. Так делать нельзя ни в коем случае ни при какой ситуации). 
  * Теперь везьде в модуле Matrix32 для уничтожения объектов TMatrix используется метод FreeMatrix.
  * Подправлены многие функции классов TMatrix, TRecordMatrix, TCellMatrix, TWorkspace. Изменений весьма много. Скажем, теперь при обращении к ячейке TCellMatrix.Cells[] функция проверяет ссылку на возвращаемый объект, и если она "битая", то генерирует исключение. Жесто? Зато правильно. Ну и в других классах изменения тоже в таком духе. Убрал возможность в массиве-записи регистрировать один и тот-же объект под разными именами (однако в массиве ячеек один и тот же объект можно распихать по разным ячейкам). Как правильно - практика покажет. Работать объекты должны теперь гораздо надежнее, чем раньше.

 -= 03.03.2007 =-

 * Модуль Matrix32 очень сильно изменился. Весь код модуля (а это порядка 10000 строк) был просмотрен множество раз. Слабые места в коде были найдены, переписаны как следует. Основные изменения коснулись обработки исключений. Ранее обработка исключений сводилась к вызову функции DoMatrixError(), в которой заново создавался объект исключения EMatrixError (отладочная информация добавлялась в текст вновь созданного объекта исключения), и исключение генерировалось с этим объектом. Теперь обработка исключений гораздо более гибкая. Введено множество наследников EMatrixError (это добавляет информацию об исключении). Введены несколько опций условной компиляции. Из них опция RecreateEObj включает код записи отладочной информации в текст исключений. Данная опция используется в модуле повсеместно, так, где применяется оператор try...except. Если опция отключена, то выполняется регенерация пойманного исключения без каких-либо дополнительных действий. Если опция включена, то вызывается функция MatrixReCreateExceptObj(), которая пересоздать заново объект исключения и добавит в него дополнительную отладочную информацию.
 * Функции генерации исключения DoError и DoMatrixError удалены.
 * В класс TMatrix пополнился несколькими методами для упрощения работы с исключениями: CreateAbstractErrorObj(), CreateExceptObject(), ReCreateExceptObject(). Данные методы позволили существенно уменьшить размеры модуля (примерно на 500 строк).
 * Удалил функцию CheckMatrixRef(). Вместо нее добавил метод TMatrix.CheckRef (данный метод сгенерирует исключение в случае, если Self не является массивом TMatrix).
 * Добавлен файл директив условной компиляции MatrixCommon.inc. Директивы в этом файле являются общими, и используются не только в модуле Matrix32, но и в других библиотеках, основанных на Matrix32.
 * Улучшил оформление кода (оформил его согласно общепринятым стандартам).

 -= 17.03.2007 =-

 * Обновил сайт. Добавил туда справочную систему по Matrix32

 -= 18.03.2007 =-

 * Добавил функцию TMatrix.DimOperation(). Данная функция выполняет заданную операцию над указанным измерением массива. К примеру, с помощью данной можно выполнить такие операции Matlab, как Sum, Prod и т.д.

 * Удалось уменьшить размер исполняемого модуля, использующего Matrix32 на 40 кбайт за счет того, что многие виртуальные функции, перекрытые в классе TNumericMatrixClass сделаны статическими (в самом классе TMatrix). Однако для приложений, активно использующих различные функции Matrix32 уменьшение размеров будет не столь значительным. На данный момент минимальное увеличение испольняемого файла при одном только подключении Matrix32 - 74 Кбайта.

-= 05.05.2007 =-

* Исправления модуля matrixMatlab. Теперь управлять окном команд Матлаба стало удобнее. Узнал информацию обо всех функциях, которые сервер Матлаба предоставляет с помощью DCOM, обращение к особенно полезным добавил в модуль.

-= 09.06.2007 =-

* Модуль Matrix32 адаптирован для работы в Delphi2006. Раньше эта среда выдавала кучу варнингов из-за того, что в TMatrix объявлены ряд абстрактных методов (в основном для чтения и записи свойств). Для исправления ошибки пришлось убрать слово abstract а в реализации процедуры сгенерировать EMatrixAbstractError.
* Добавлена функция AssignPointers(), которая может связать множество переменных с одним объектом TMatrix. Связанные переменные обнуляются при уничтожении объекта. Подробности - в комментариях модуля.
* Добавлен ряд свойств для работы с объектом как с одноэлементным массивом: Value, ValueI, ValueI64 и т.д. При записи значения с помощью данных свойств проверяется, есть ли в массиве хоть один элемент. Если массив пусть, то выполняется операция Resize([1]).
* Исправлена функция DefragBinaryFile(). Раньше в ней была ошибка - неправильно выполнялась дефрагментация файла, содержащего сложные объекты (записи, массивы ячеек).
* Исправлена ошибка в TRecordMatrix. Ранее обращение к полям было регистронезависимо. После исправления, к примеру, слова "matrix" и "Matrix" считаются именами двух разных объектов.
* размер модуля на данный момент - 10465 строк.

-= 04.08.2007 =-

* Проверена работоспособность модуля на Delphi2007.
* Добавлена возможность локализации приложения. Пока доступны только Русский и Английский. Схема таже, что и в FastMM. Создается каталог Translations, в котором для каждого языка создается одноименный каталог (Russian, English). В каждый из этих каталогов копируется файл "Matrix32Messages.inc". Затем для трансляции на другой язык достаточно скопировать нужный inc-файл в каталог с файлом Matrix32.pas.

-= 10.08.2007 =-

* Исправлена ошибка в методе TNumericMatrixClass.SetRowChars(). Там при вызове функции PreservResize() были перепутаны местами параметры "число строк" и "число столбцов". В реальности метод оказался крайне полезный. Например на работе была необходимость записать в один файл кучу xml-файлов, а также дополнительную информацию. Под каждый xml-файл заводился отдельный объект TCharMatrix, в который весь xml-файл записывался с помощью SetRowChars() как одна строка.
Так что для чего можно использовать Matrix32 - зависит от вашей фантазии :)

* Добавлен модуль MatrixTranslate.pas. В нем всего одна функция - TranslateMatrixMessages(). Она загружает текстовые сообщения системы из заданного ini-файла. Этот модуль предусмотрен для внесения программистами произвольных изменений. Это связано с тем, что не хочется жестко задавать имена переменных в ini-файле. Программист может изменить их на свое усмотрение.

-= 05.02.2008 =-

* Найдена серьезная ошибка в работе функции AvailMemory(). Ошибка связана с тем, что при сложении Double := Cardinal + Cardinal происходит сначала следующее сложение: Cardinal := Cardinal + Cardinal, а уже после присвоение Double := Cardinal. Если на компьютере установлено 2 гига оперативной памяти и файл подкачки на 2.5 гига, по функция считала, что свободный объем памяти составляет 0.5 ГБ.

-= 07.02.2008 =-

* Удалено ограничение MaxShort, наложенное на метод Rand, заполняющий массив случайными числами. Теперь используется тип Cardinal.

-= 09.02.2008 =-

* Добавлена функция WaitAndCreateFileStream(), которая пытается открыть указанный файл (с заданным режимом) до тех пор, пока не истечет таймаут. Работа функции защищена мютексом - для того, чтобы несколько потоков не пытались открыть один и тот же файл одновременно (и соблюдали очередность при работе с файлом). По умолчанию время ожидания - 1000 миллисекунд. В модуле Matrix32 время ожидания хранится в глобальной переменной MatrixWaitFileOpen. При тестировании данной функции были созданы 10 потоков и время таймаута истанавливалось равным 60 секунд. В течение 10 минут все 10 потоков в цикле выполняли следующие операции: чтение, запись, дефрагментацию. Ни одной ошибки доступа к файлу не произошло.

* В функции дефрагментации добавлена защита на вызов свойства TFileStream.Size. Дело в том, что операционная система не дает уменьшить размер файла, если в это же время другой поток сделал для этого же файла FileMapping. В этом случае ОС возвращает ошибку "System Error.  Code: 1224. Запрошенную операцию нельзя выполнить для файла с открытой пользователем сопоставленной секцией" (System Error.  Code: 1224. The requested operation cannot be performed on a file witha user-mapped section open.), а VCL выполняет генерацию исключения. Это несложно проверить с помощью модуля "Lister", входящего в "Total Commander" (он-то как раз и создавал объект FileMapping). Защита заключается в отмене дефрагментации без генерации каких-либо исключений.

-= 21.02.2008 =-
* Подправлена функция TCommonMatrixClass.PreservResize(). Раньше, если массиву с ненулевым размером пытались изменить размер на нулевой, возникала ошибка Access Violation. Теперь, перед вызовом функции _AssignElems(), делается проверка: if NewMatrix.ElemCount > 0 then...

-= 16.03.2008 =-

* Теперь все обращения к спискам TList выполняются в рамках критической секции. Система стала более потокобезопасной.

* Добавлена процедура SetFloatToStringFunction(), с помощью которой можно переопределить функцию, используемую системой Matrix32 для преобразования чисел в текст. По умолчанию используется функция FloatToString(), которая преобразует значения в текст с минимальной потерей точности, однако она неудобна для визуального представления элементов массива.

* Закончен первый этап разработки библиотек взаимодействия с модулем Lapack (matrixLapack.pas и matrixBLAS.pas). На сайт выложены библиотеки matrixlapack.dll и matrixatlas.dll для некоторых процессоров (AMD Athlon и Intel Pentium). Все atlas-библиотеки тестировались на WinXP SP2, AMD Athlon 64 X2 Dual 4600+, 2.00 ГБ ОЗУ. Для тестирования использовалась операция матричного умножения "dgemm" для двух квадратных матриц размеров 2000 х 2000. Получены следующие результаты:
  - PPro:   9437 мс
  - PII:    9032 мс
  - PIII:   8641 мс
  - P4:     7937 мс
  - Athlon: 6610 мс
  - функция MulMatrices(), встроенная в Matrix32: 978484
  
Тестирование на WinXP SP2, Celeron 1300, 512 МБ ОЗУ прошло со следующими результатами:
  - PPro:   26375 мс
  - PII:    25203 мс
  - PIII:   27062 мс
  - P4:     32875 мс
  - Athlon: 29766 мс
  
Т.к. все тесты прошли успешно, можно считать, что любая библиотека на Windows32 будет работать. Для распространения программ лучше всего использовать PIII (либо PII) как наиболее универсальный и достаточно быстрый модуль (все-таки быстрее, чем функция MulMatrices, более чем в 100 раз).

* На данный момент реализованы следующие функции:
  - LapackLUFactorization() - LU-разложение
  - LapackDeterminant() - вычисление определителя
  - LapackSolveSLE() - решение СЛАУ (system of linear equations)
  - LapackInverseMatrix() - вычисление обратной матрицы
  - BlasMulMatrices() - матричное умножение
Это наиболее часто используемые функций. Не реализовано порядко 1000 менее часто используемых функций.

-= 24.03.2008 =-

 * Оптимизирован метод TCommonMatrixClass.Transpose(). Теперь он на 10% быстрее, чем раньше, транспонирует 2-мерные массивы.
 
-= 07.01.2010 =- 

 * Типы для комплексных чисел TSingleComplex, TDoubleComplex, TExtendedComplex теперь "packed record". Раньше директива "packed" была пропущена по ошибке.
 * Модуль Matrix32.pas полностью адаптирован для работы в D2010. Также внесены исправления в модуль cUtils.pas (в основном замена Char на AnsiChar).
 * Разработана функция FastStringReplace. Она осуществляет замену подстроки OldPattern в строке S на строку NewPattern. Полностью эквивалентна SysUtils.StringReplace, однако работает во много раз (в некоторых случаях в тысячи раз) быстрее.
 
-= 30.11.2010 =-
 * Исправлена функция MatrixNameIsValid для D2010. Она работала неправильно, могла пропускать некоторые буквы национального алфавита.
 * Исправлена работа с множествами. Добавлена функция CharInSet (компилируется только для старых Delphi < 2009)
 * Отлажено программное взаимодействие с Matlab7.11. Теперь, если передается вектор (N), то в матлабе он выглядет как строка (1хN). Исправлен обмен символьных массивов,
   содержащих символы национального алфавита.
   
-= 02.12.2010 =-   
 * TestMatrix: 
   - реализован достаточно-таки удобный интерфейс пользователя. На экране всегда видно
     список массивов, а также содержимое выбранного массива (в табличном виде).   
   - реализовано удобное взаимодействие с Matlab (загрузка из матлаба, передача в матлаб,
     окно команд, окно истории команд).
 * matrixMatlab.pas: 
   - доработана функция GetMatrix. Теперь она позволяет загрузить любой
     объект Matlab'а и после этого присвоить загруженному объекту заданное имя.
   - исправлена передача в Матлаб пустых элементов массива ячеек.
   
-= 07.12.2010 =-
   - исправлена функция CopyArrayPart. Теперь она позволяет свободно удалять строки / столбцы матрицы.
   - удален метод ArraySize. В модуле Matrix32 он нигде не использовался. Вместо него добавлен метод MatrixSize. Для числового массива он возвращает размер памяти, 
     выделеной под массив. Для объектов-контейнеров возвращает размер памяти, выделенную под все дочерние объекты. Учитывается только значение, хранимое в FArraySize.
   - исправлена загрузка нейронной сети из Matlab7.11. Объект network сперва преобразовывается в struct, а только затем загружается.
   - исправлена передача записей в Матлаб. Теперь перед началом передачи вызывается команда матлаба "clear StructName".
   - обнаружено, что для загрузки модуля matrixlapack.dll требуется дополнительный модуль dforrt.dll (из состава Матлаба)
   
-= 17.12.2010 =-
 * matrixMatlab.pas: добавлена возможность загрузки объектов "указатель на функцию" и "COM-объект". При этом создается объект
   TCharMatrix с текстом: наименование функции, на которую ссылается указатель, или наименование COM-класса.
   
-= 06.08.2011 =-   
 * Matrix32.pas: Добавлено свойство TMatrix.ElemSize: Возвращает размер элемента массива в байтах
 
-= 26.04.2013
 * Установлена лицензия BSD 2.
 * Исходники загружены на sf.net