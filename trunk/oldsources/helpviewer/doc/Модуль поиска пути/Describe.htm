<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<TITLE> Модуль поиска пути </TITLE>
<META NAME="Generator" CONTENT="EditPlus">
<META NAME="Author" CONTENT="Логинов Д.С.">
<META NAME="Keywords" CONTENT="модуль поиска пути matrix">
<META NAME="Description" CONTENT="Модуль поиска пути">
</HEAD>

<BODY>
<font size='+1' style="font-family: courier new;"><i>
<h1 align=center>Модуль поиска пути FindPath.pas</h1>

<P>С помощью модуля FindPath.pas вы можете найти кратчайший путь между двумя точками на карте. Алгоритм, используемый в данном модуле, предполагает, что на карте (игровой карте) существуют проходимые и непроходимые зоны. Карта - матрица любых размеров. Элементы матрицы - зоны или области (проходимые или непроходимые). Кратчайший путь между заданными точками - сформированный программой список координат проходимых областей.

<P>Весь алгоритм находится в классе TFindPath. Класс абсолютно независимый от основной программы, поэтому систему поиска пути можно подключить к любому проекту.

<P>Матрица карты содержит элементы Boolean, хотя она имеет формат массива Matrix (эта возможность появляется благодаря использованию свойств в классе). Проходимые зоны имеют значение False, а непроходимые - True.

<P>Используемый алгоритм работает очень быстро и успешно справляется с картами, имеющими миллионы элементов. В случае, если карта имеет размер порядка 10000 элементов, время поиска кратчайшего пути составляет всего несколько миллисекунд. 
<P>Алгоритм поиска работает следующим образом: сначала вызывается функция поиска прямолинейного пути, которая в одно мгновение определяет, есть ли такой путь или нет. Если прямолинейного пути нет, то запускается алгоритм поиска ключевой точки: в цикле просматриваются все точки, прилегающие к начальной и конечной точке, после просмотра они помечаются и просматриваются все точки, прилегающие к этим помеченным точкам. Все точки, прилегающие к начальной точке (а также все точки, прилегающие к ним), помечаются одним числом, а для конечной точки используется другое число. Благодаря такой разметке, как только мы обнаруживаем точку, помеченную противоположным число, считаем ее ключевой. При следующей итерации эта ключевая точка будет считаться начальной (или конечной). Все ключевые точки включаются в состав кратчайшего пути. В самом конце происходит оптимизация найденного пути, благодаря которой исключаются лишние элементы пути.

<P>Для использования алгоритма поиска пути вы должны выполнить следующие шаги:
<OL>
	<LI>Объявить переменную типа TFindPath (<B>var FP: TFindPath</B>);
	<LI>Инициализировать объект FP (<B>FP := TFindPath.Create(100, 50)</B>). При создании объекта автоматически создается матрица карты указанных размеров. Она имеет только нулевые элементы.
	<LI>Скопировать карту в матрицу. В вашей программе карта может храниться в каком угодно формате. Допустим карта храниться в массиве, объявленном следующим образом:
<pre>
<b>var</b>
  MapArray: <b>array</b>[<span style="color: navy;">1..100</span>, <span style="color: navy;">1..50</span>] <b>of</b> <b>Record</b>
    Color: TColor;  <i style="color: navy;">// Цвет области</i>
    Heigth: Single; <i style="color: navy;">// Высота</i>
    <span style="color: navy;">..............</span>
    Wall: Boolean;  <i style="color: navy;">// Препятствие</i>
  <b>end</b>;
</pre>
В этой записи нас интересует только переменная Wall, указывающая на наличие препятствия. Скопировать карту в матрицу можно следующим образом:
<pre>
<b>for</b> i := <span style="color: navy;">1</span> <b>to</b> <span style="color: navy;">100</span> <b>do</b>
  <b>for</b> j := <span style="color: navy;">1</span> <b>to</b> <span style="color: navy;">50</span> <b>do</b>
    FP.Map[i, j] := MapArray[i, j].Wall;
</pre>


	<LI>Выполнить поиск пути (<B>if FP.Find(1, 1, 50, 50) then ShowMessage('Путь найден')</B>). Функция <A HREF="Find.html">Find()</A> является основной в классе TFindPath. В случае, если путь найден, функция вернет True.
	<LI>Считать точки найденного пути из списка PathList. Необходимо учитывать, что в этом списке присутствуют начальная и конечная точки, которые мы передали в функцию Find(). Кроме того, вы можете узнать время поиска. Для этого нужно считать значение переменной SearchTime.
</OL>

<P>Вы можете хранить карты в файлах, а также загружать их из файлов. Для этого используются соответственно функции <A HREF="SaveMapToFile.html">SaveMapToFile</A>() и <A HREF="LoadMapFromFile.html">LoadMapFromFile</A>().

<P>Будут рассмотрены только функции, которые находятся в разделе <B>public</B> класса TFindPath. Все они находятся в текущем разделе.

</BODY>
</HTML>
